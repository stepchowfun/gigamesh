image: ubuntu:18.04
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl -LSs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -LSs https://deb.nodesource.com/setup_14.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs
      curl -LSs https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o /usr/local/bin/cloud_sql_proxy
      chmod a+rx /usr/local/bin/cloud_sql_proxy

  install_tagref:
    dependencies:
      - install_packages
    command: |
      set -euo pipefail
      curl https://raw.githubusercontent.com/stepchowfun/tagref/master/install.sh -LSfs | sh

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_dependencies:
    dependencies:
      - create_user
      - install_packages
      - install_tagref
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend/package-lock.json
      - frontend/package.json
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm ci)
      (cd frontend && npm ci)

  build:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.dockerignore
      - backend/.eslintrc.js
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/Dockerfile
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      - backend/dist
      - frontend/dist
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run build)
      (cd frontend && npm run build)

  check:
    dependencies:
      - build
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run check)
      (cd frontend && npm run check)

  format:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.dockerignore
      - backend/.eslintrc.js
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/Dockerfile
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - backend/.dockerignore
      - backend/.eslintrc.js
      - backend/.gitignore
      - backend/Dockerfile
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run format)
      (cd frontend && npm run format)

      # These `rm` commands are needed to work around a bug in `docker container cp` related to
      # symlinks. See https://stackoverflow.com/questions/35787702/docker-cp-a-folder-with-a-relative-symlink-invalid-symlink
      # for details.
      rm backend/src/shared
      rm frontend/src/shared
      rm shared/.prettierrc.json
      rm shared/jest.config.js

  development:
    cache: false
    dependencies:
      - install_dependencies
    environment:
      GCP_API_CREDENTIALS: null
      POSTGRES_INSTANCE_CONNECTION_NAME: gigamesh-293109:us-central1:gigamesh
      POSTGRES_SECRET: null # [ref:POSTGRES_SECRET]
      SENDGRID_SECRET: null # [ref:SENDGRID_SECRET]
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and those in
      # `mount_paths`
      - backend/.dockerignore
      - backend/.eslintrc.js
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/Dockerfile
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and those in
      # `mount_paths`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js
    mount_paths:
      - backend/src/
      - frontend/src/
      - shared
    ports:
      - 8081:8081 # The backend
      - 8080:8080 # The frontend
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_API_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Start all the servers.
      cloud_sql_proxy "-instances=$POSTGRES_INSTANCE_CONNECTION_NAME=tcp:5432" & \
        (cd backend && npm run development) & \
        (cd frontend && npm run development)

  deploy_backend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    environment:
      GCB_REGION: us-central1
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-293109
      GCR_REGION: us-central1
      GCR_SERVICE_ACCOUNT: gigamesh-api@gigamesh-293109.iam.gserviceaccount.com
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Build the Docker image.
      gcloud builds submit backend \
        --project "$GCP_PROJECT" \
        --quiet \
        --gcs-log-dir "gs://${GCP_PROJECT}_cloudbuild/logs" \
        --ignore-file .dockerignore \
        --tag "$GCB_REGION-docker.pkg.dev/$GCP_PROJECT/gigamesh/api"

      # Deploy the Cloud Run service.
      gcloud run deploy api \
        --project "$GCP_PROJECT" \
        --quiet \
        --platform managed \
        --image "$GCB_REGION-docker.pkg.dev/$GCP_PROJECT/gigamesh/api" \
        --add-cloudsql-instances gigamesh-293109:us-central1:gigamesh \
        --set-env-vars INSTANCE_CONNECTION_NAME=gigamesh-293109:us-central1:gigamesh \
        --set-env-vars NODE_ENV=production \
        --region "$GCR_REGION" \
        --service-account "$GCR_SERVICE_ACCOUNT" \
        --allow-unauthenticated

      # Delete the Docker image.
      gcloud beta artifacts docker images delete \
        --project "$GCP_PROJECT" \
        --quiet \
        --delete-tags \
        "$GCB_REGION-docker.pkg.dev/$GCP_PROJECT/gigamesh/api"

      # Clean up the Cloud Storage bucket created by Cloud Build.
      gsutil -m rm -r "gs://${GCP_PROJECT}_cloudbuild"

  deploy_frontend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    environment:
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-293109
      PRODUCTION_BUCKET: www.gigamesh.io
      STAGING_BUCKET: gigamesh-staging
    user: user
    command: |
      set -euo pipefail

      # This script approximates an atomic deployment. There are two situations
      # in which the approximation breaks down and a client may temporarily
      # experience a broken website during a deploy:
      #
      # 1. File A references file B, either directly or indirectly. A client
      #    downloads file A, then a deploy deletes file B, and finally the
      #    client requests file B. To mitigate this, we don't delete any files
      #    until a short while after all new files have been added to give
      #    clients a reasonable amount of time to follow any references.
      #    [tag:create_sleep_delete]
      #
      # 2. Non-fingerprinted file A references non-fingerprinted file B, either
      #    directly or indirectly. An in-progress deploy creates file A, then a
      #    client downloads file A and requests file B before the deploy has
      #    created file B. To mitigate this, we rarely introduce new references
      #    to non-fingerprinted files.

      # Files with these extensions are fingerprinted.
      FINGERPRINTED_EXTENSIONS='js svg'

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Upload the files to the staging bucket. We use a staging bucket rather
      # than simply uploading the files directly to production because we want
      # to set the object metadata before the files are served to real users.
      gsutil -m rsync -d -r -c frontend/dist "gs://$STAGING_BUCKET"

      # By default, apply the most conservative caching policy: always require
      # revalidation. In the next step, we'll set a more aggressive caching
      # policy for fingerprinted files.
      gsutil -m setmeta -h 'Cache-Control:public, max-age=0, must-revalidate' \
        "gs://$STAGING_BUCKET/*"

      # Allow fingerprinted files to be cached for up to a week.
      for EXTENSION in $FINGERPRINTED_EXTENSIONS; do
        gsutil -m setmeta -h 'Cache-Control:public, max-age=604800, immutable' \
          "gs://$STAGING_BUCKET/*.$EXTENSION"
      done

      # Copy the fingerprinted files to the production bucket. It's important
      # to copy the fingerprinted files before copying the non-fingerprinted
      # files, since the latter may refer to the former.
      for EXTENSION in $FINGERPRINTED_EXTENSIONS; do
        gsutil -m cp \
          "gs://$STAGING_BUCKET/*.$EXTENSION" \
          "gs://$PRODUCTION_BUCKET"
      done

      # Copy the remaining files to the production bucket.
      gsutil -m cp 'gs://'"$STAGING_BUCKET"'/*' 'gs://'"$PRODUCTION_BUCKET"

      # Delete any superfluous files in the production bucket. Before doing so,
      # sleep for a short duration to give clients one last chance to download
      # these old files [ref:create_sleep_delete].
      sleep 10
      gsutil -m rsync -d -r -c "gs://$STAGING_BUCKET" "gs://$PRODUCTION_BUCKET"

  deploy:
    dependencies:
      - deploy_backend
      - deploy_frontend
    cache: false
