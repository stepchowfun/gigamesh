image: ubuntu:18.04
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl -LSs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -LSs https://deb.nodesource.com/setup_15.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs
      curl -LSs https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o /usr/local/bin/cloud_sql_proxy
      chmod a+rx /usr/local/bin/cloud_sql_proxy

  install_tagref:
    dependencies:
      - install_packages
    command: |
      set -euo pipefail
      curl https://raw.githubusercontent.com/stepchowfun/tagref/master/install.sh -LSfs | sh

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_dependencies:
    dependencies:
      - create_user
      - install_packages
      - install_tagref
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend-lib/package-lock.json
      - frontend-lib/package.json
      - frontend/package-lock.json
      - frontend/package.json
      - package-lock.json
      - package.json
    user: user
    command: |
      set -euo pipefail
      (cd frontend-lib && npm ci && npm run repackage)
      (cd backend && npm ci)
      (cd frontend && npm ci)
      npm ci

  add_source_files:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and
      # those which have already been added in dependent tasks
      - backend/.eslintrc.js
      - backend/Dockerfile
      - backend/babel.config.json
      - backend/jest.config.js
      - backend/src/
      - backend/static/
      - backend/tsconfig.json
      - backend/webpack.common.js
      - backend/webpack.development.js
      - backend/webpack.production.js

      # All the top-level paths in `frontend-lib/` except those in `.gitignore`
      # and those which have already been added in dependent tasks
      - frontend-lib/.eslintrc.js
      - frontend-lib/.stylelintrc.js
      - frontend-lib/babel.config.json
      - frontend-lib/images.d.ts
      - frontend-lib/jest.config.js
      - frontend-lib/src/
      - frontend-lib/tsconfig.json
      - frontend-lib/webpack.common.js
      - frontend-lib/webpack.development.js
      - frontend-lib/webpack.production.js

      # All the top-level paths in `frontend/` except those in `.gitignore` and
      # those which have already been added in dependent tasks
      - frontend/.eslintrc.js
      - frontend/babel.config.json
      - frontend/jest.config.js
      - frontend/src/
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # All the other top-level paths except `.git` and those in `.gitignore`
      # and those which have already been added in dependent tasks
      - .github/
      - .gitignore
      - .prettierrc.js
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - INSTALLATION.md
      - LICENSE.md
      - README.md
      - toast.yml

  build:
    dependencies:
      - add_source_files
    user: user
    command: |
      set -euo pipefail
      npm run build-production

  check:
    dependencies:
      - build
    user: user
    command: |
      set -euo pipefail
      npm run check
      tagref

  development:
    cache: false
    dependencies:
      - add_source_files
    environment:
      DATABASE_INSTANCE_CONNECTION_NAME: null
      GCP_DEVELOPMENT_CREDENTIALS: null
      POSTGRES_SECRET: null
      SENDGRID_SECRET: null
    ports:
      - 8080:8080
    user: user
    command: |
      set -euo pipefail

      # Build in development mode.
      npm run build-development

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEVELOPMENT_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Start all the servers.
      cloud_sql_proxy \
        "-instances=$DATABASE_INSTANCE_CONNECTION_NAME=tcp:5432" &
      (cd backend && npm run serve)

  deploy:
    dependencies:
      - build
      - check
    cache: false
    environment:
      DATABASE_INSTANCE_CONNECTION_NAME: null
      GAR_LOCATION: null
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT_ID: null
      GCR_REGION: null
      GCR_SERVICE_ACCOUNT: null
      STAGING_BUCKET: null
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Prepare the filesystem for building the Docker image.
      mkdir .build/backend
      cp backend/Dockerfile .build/backend/Dockerfile
      cp -R backend/dist .build/backend/src
      cp -R backend/node_modules .build/backend
      rm .build/backend/node_modules/frontend-lib
      cp -R .build/frontend-lib .build/backend/node_modules

      # Build the Docker image.
      gcloud builds submit .build/backend \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --gcs-log-dir "gs://$STAGING_BUCKET/build-logs" \
        --gcs-source-staging-dir "gs://$STAGING_BUCKET/build-source" \
        --tag "$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www"

      # Deploy the Cloud Run service. The `beta` release track is needed to use
      # the `ingress` and `--min-instances` flags.
      gcloud beta run deploy www \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --platform managed \
        --image "$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www" \
        --set-cloudsql-instances "$DATABASE_INSTANCE_CONNECTION_NAME" \
        --set-env-vars \
          "INSTANCE_CONNECTION_NAME=$DATABASE_INSTANCE_CONNECTION_NAME" \
        --set-env-vars NODE_ENV=production \
        --region "$GCR_REGION" \
        --service-account "$GCR_SERVICE_ACCOUNT" \
        --ingress internal-and-cloud-load-balancing \
        --min-instances 1 \
        --allow-unauthenticated

      # Delete the Docker image.
      gcloud beta artifacts docker images delete \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --delete-tags \
        "$GAR_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www"

      # Clean up the Cloud Storage objects created during the build.
      gsutil -m rm -r \
        "gs://$STAGING_BUCKET/build-logs/" \
        "gs://$STAGING_BUCKET/build-source/"
