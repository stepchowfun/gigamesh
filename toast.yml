image: ubuntu:20.04
default: check
user: user
command_prefix: |
  # Make Bash not silently ignore errors.
  set -euo pipefail
tasks:
  install_packages:
    description: Install system packages.
    user: root
    command: |
      # Install the Google Cloud SDK and Node.js.
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl -LSs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -LSs https://deb.nodesource.com/setup_16.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs

      # Install the Cloud SQL Auth Proxy.
      curl -LSs https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o /usr/local/bin/cloud_sql_proxy
      chmod a+rx /usr/local/bin/cloud_sql_proxy

  install_tagref:
    description: Install Tagref, a reference checking tool.
    dependencies:
      - install_packages
    user: root
    command: |
      # Install Tagref using the official installer script.
      curl https://raw.githubusercontent.com/stepchowfun/tagref/main/install.sh -LSfs | sh

  create_user:
    description: Create a user who doesn't have root privileges.
    user: root
    command: |
      # Create a user named `user` with a home directory.
      adduser --disabled-password --gecos '' user

  install_dependencies:
    description: Download and build NPM packages used by the program.
    dependencies:
      - create_user
      - install_packages
      - install_tagref
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend-lib/package-lock.json
      - frontend-lib/package.json
      - frontend/package-lock.json
      - frontend/package.json
      - package-lock.json
      - package.json
    command: |
      # Download the dependencies for all the subprojects.
      (cd frontend-lib && npm ci && npm run repackage)
      (cd backend && npm ci)
      (cd frontend && npm ci)
      npm ci

  add_source_files:
    description: Copy in the source files.
    dependencies:
      - install_dependencies
    input_paths:
      - .
    excluded_input_paths:
      - .git

      # [tag:excluded_input_paths] Keep this in sync with [ref:gitignore].
      - .build
      - backend/dist
      - backend/node_modules
      - frontend-lib/dist
      - frontend-lib/node_modules
      - frontend/dist
      - frontend/node_modules
      - node_modules

  build:
    description: Build the source code.
    dependencies:
      - add_source_files
    command: |
      # Build all the subprojects.
      npm run build-production

  check:
    description: Run the linters.
    dependencies:
      - build
    command: |
      # Run the linters for all the subprojects.
      npm run check

      # Check references with Tagref.
      tagref

  development:
    description: Run the development server.
    cache: false
    dependencies:
      - add_source_files
    environment:
      DATABASE_INSTANCE_CONNECTION_NAME: null
      GCP_DEVELOPMENT_CREDENTIALS: null
      POSTGRES_SECRET: null
      SENDGRID_SECRET: null
    ports:
      - 8080:8080
    command: |
      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEVELOPMENT_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Start the database proxy in the background.
      cloud_sql_proxy "-instances=$DATABASE_INSTANCE_CONNECTION_NAME=tcp:5432" &

      # Build and run the server in development mode.
      npm run serve-development

  deploy:
    description: Deploy to Google Cloud Platform.
    dependencies:
      - build
      - check
    cache: false
    environment:
      ARTIFACT_REGISTRY_LOCATION: null
      CLOUD_RUN_REGION: null
      CLOUD_RUN_SERVICE_ACCOUNT: null
      DATABASE_INSTANCE_CONNECTION_NAME: null
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT_ID: null
      STAGING_BUCKET: null
    command: |
      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Prepare the filesystem for building the Docker image.
      mkdir .build/backend
      cp backend/Dockerfile .build/backend/Dockerfile
      cp -R backend/dist .build/backend/src
      cp -R backend/node_modules .build/backend
      rm .build/backend/node_modules/frontend-lib
      cp -R .build/frontend-lib .build/backend/node_modules

      # Build the Docker image.
      gcloud builds submit .build/backend \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --gcs-log-dir "gs://$STAGING_BUCKET/build-logs" \
        --gcs-source-staging-dir "gs://$STAGING_BUCKET/build-source" \
        --tag "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www"

      # Deploy the Cloud Run service.
      gcloud run deploy www \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --platform managed \
        --image "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www" \
        --set-cloudsql-instances "$DATABASE_INSTANCE_CONNECTION_NAME" \
        --set-env-vars "INSTANCE_CONNECTION_NAME=$DATABASE_INSTANCE_CONNECTION_NAME" \
        --set-env-vars NODE_ENV=production \
        --region "$CLOUD_RUN_REGION" \
        --service-account "$CLOUD_RUN_SERVICE_ACCOUNT" \
        --ingress internal-and-cloud-load-balancing \
        --min-instances 1 \
        --allow-unauthenticated

      # Delete the Docker image. This command fails due to a bug in Google Cloud Platform (internal
      # bug ID: 197457347), but the image is deleted nevertheless. To prevent this issue from
      # failing the deploy, a `!` has been temporarily added to turn the failure into a success.
      # When this starts failing again, we'll know the bug has been fixed and the `!` can be
      # removed.
      ! gcloud artifacts docker images delete \
        --project "$GCP_PROJECT_ID" \
        --quiet \
        --delete-tags \
        "$ARTIFACT_REGISTRY_LOCATION-docker.pkg.dev/$GCP_PROJECT_ID/gigamesh/www"

      # Clean up the Cloud Storage objects created during the build.
      gsutil -m rm -r \
        "gs://$STAGING_BUCKET/build-logs/" \
        "gs://$STAGING_BUCKET/build-source/"
