image: ubuntu:18.04
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl -LSs https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -LSs https://deb.nodesource.com/setup_14.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs
      curl -LSs https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o /usr/local/bin/cloud_sql_proxy
      chmod a+rx /usr/local/bin/cloud_sql_proxy

  install_tagref:
    dependencies:
      - install_packages
    command: |
      set -euo pipefail
      curl https://raw.githubusercontent.com/stepchowfun/tagref/master/install.sh -LSfs | sh

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_dependencies:
    dependencies:
      - create_user
      - install_packages
      - install_tagref
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend/package-lock.json
      - frontend/package.json
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm ci)
      (cd frontend && npm ci)

  build:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      - backend/dist
      - frontend/dist
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run build)
      (cd frontend && npm run build)

  check:
    dependencies:
      - build
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run check)
      (cd frontend && npm run check)

  format:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run format)
      (cd frontend && npm run format)

      # These `rm` commands are needed to work around a bug in `docker container cp` related to
      # symlinks. See https://stackoverflow.com/questions/35787702/docker-cp-a-folder-with-a-relative-symlink-invalid-symlink
      # for details.
      rm backend/src/shared
      rm frontend/src/shared
      rm shared/.prettierrc.json
      rm shared/jest.config.js

  development:
    cache: false
    dependencies:
      - install_dependencies
    environment:
      GCP_API_CREDENTIALS: null
      POSTGRES_INSTANCE_CONNECTION_NAME: gigamesh-293109:us-central1:gigamesh
      POSTGRES_SECRET: null # [ref:POSTGRES_SECRET]
      SENDGRID_SECRET: null # [ref:SENDGRID_SECRET]
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and those in
      # `mount_paths`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and those in
      # `mount_paths`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js
    mount_paths:
      - backend/src/
      - frontend/src/
      - shared
    ports:
      - 8081:8081 # The backend
      - 8080:8080 # The frontend
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_API_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Start all the servers.
      cloud_sql_proxy "-instances=$POSTGRES_INSTANCE_CONNECTION_NAME=tcp:5432" & \
        (cd backend && npm run development) & \
        (cd frontend && npm run development)

  deploy_backend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    input_paths:
      - backend/.gcloudignore
    environment:
      GCF_REGION: us-central1
      GCF_SERVICE_ACCOUNT: gigamesh-api@gigamesh-293109.iam.gserviceaccount.com
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-293109
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Deploy the Cloud Functions.
      gcloud functions deploy api \
        --project "$GCP_PROJECT" \
        --region "$GCF_REGION" \
        --runtime nodejs10 \
        --source backend \
        --entry-point entry \
        --service-account "$GCF_SERVICE_ACCOUNT" \
        --trigger-http \
        --allow-unauthenticated

  deploy_frontend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    environment:
      DOMAIN: www.gigamesh.io
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-293109
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Upload all fingerprinted files first, so they'll be available by the
      # time they're referenced by non-fingerprinted files.
      for EXTENSION in js svg; do
        # Upload files with this particular extension.
        gsutil -m cp \
          $(find frontend/dist -type f -name "*.$EXTENSION" -print) \
          "gs://$DOMAIN"

        # Fingerprinted files are cached for up to a week.
        gsutil -m setmeta -h 'Cache-Control:public, max-age=604800, immutable' \
          'gs://'"$DOMAIN"'/**.'"$EXTENSION"
      done

      # Upload the remaining files.
      for EXTENSION in html ico; do
        # Upload files with this particular extension.
        gsutil -m cp \
          $(find frontend/dist -type f -name "*.$EXTENSION" -print) \
          "gs://$DOMAIN"

        # Non-fingerprinted files must always be revalidated.
        gsutil -m setmeta -h 'Cache-Control:public, max-age=0, must-revalidate' \
          'gs://'"$DOMAIN"'/**.'"$EXTENSION"
      done

      # Delete any superfluous files. Before doing so, we sleep for a short
      # duration in case any clients are still requesting old fingerprinted
      # assets (e.g., because they downloaded a non-fingerprinted HTML page
      # just before we started this deploy).
      sleep 10
      gsutil -m rsync -d -r -c frontend/dist "gs://$DOMAIN"

  deploy:
    dependencies:
      - deploy_backend
      - deploy_frontend
    cache: false
