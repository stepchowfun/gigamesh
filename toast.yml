image: ubuntu:18.04
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -sL https://deb.nodesource.com/setup_14.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_dependencies:
    dependencies:
      - create_user
      - install_packages
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend/package-lock.json
      - frontend/package.json
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm ci)
      (cd frontend && npm ci)

  format:
    dependencies:
      - install_dependencies
    input_paths:
      - backend/.prettierignore
      - backend/prettier.config.json
      - backend/src
      - frontend/.prettierignore
      - frontend/prettier.config.json
      - frontend/src
      - shared
    output_paths:
      - backend/src
      - frontend/src
      - shared
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run format)
      (cd frontend && npm run format)

      # These `rm` commands are needed to work around a bug in `docker container cp` related to
      # symlinks. See https://stackoverflow.com/questions/35787702/docker-cp-a-folder-with-a-relative-symlink-invalid-symlink
      # for details.
      rm backend/src/shared
      rm frontend/src/script/shared

  build:
    dependencies:
      - install_dependencies
    input_paths:
      - backend/src
      - backend/tsconfig.json
      - frontend/src
      - frontend/static
      - frontend/tsconfig.json
      - shared
    output_paths:
      - backend/dist
      - frontend/dist
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run build)
      (cd frontend && npm run build)

  development:
    dependencies:
      - build
    cache: false
    environment:
      SENDGRID_API_KEY: null
    mount_paths:
      - frontend/src
      - shared
    ports:
      - 1234:1234 # The web server
      - 1235:1235 # Hot module reloading websocket port
      - 8080:8080 # The backend API
    user: user
    command: |
      set -euo pipefail
      (cd frontend && npm run development) & (cd backend && npm run development)

  check:
    dependencies:
      - build
    input_paths:
      - backend/.eslintignore
      - backend/.eslintrc.js
      - backend/.prettierignore
      - backend/prettier.config.json
      - frontend/.eslintignore
      - frontend/.eslintrc.js
      - frontend/.prettierignore
      - frontend/prettier.config.json
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run check-without-building)
      (cd frontend && npm run check-without-building)

  deploy:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    input_paths:
      - backend/.gcloudignore
    environment:
      DOMAIN: www.gigamesh.io
      GCP_CREDENTIALS: null
      GCP_PROJECT_ID: gigamesh-279607
      GCP_REGION: us-east1
      GCP_PRODUCTION_SERVICE_ACCOUNT_EMAIL: production@gigamesh-279607.iam.gserviceaccount.com
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_APPLICATION_CREDENTIALS=~/gcp-credentials.json
      echo "$GCP_CREDENTIALS" > "$GOOGLE_APPLICATION_CREDENTIALS"
      gcloud auth activate-service-account --key-file "$GOOGLE_APPLICATION_CREDENTIALS"

      # Deploy the Cloud Functions. We copy the code into a new directory because `gcloud` doesn't
      # seem to like the fact that the files are owned by `root` (even though `user` can read from
      # and write to them).
      cp -R backend /tmp/backend
      gcloud functions deploy helloWorld \
        --project "$GCP_PROJECT_ID" \
        --region "$GCP_REGION" \
        --runtime nodejs10 \
        --source /tmp/backend \
        --service-account "$GCP_PRODUCTION_SERVICE_ACCOUNT_EMAIL" \
        --trigger-http \
        --allow-unauthenticated

      # Sync the frontend files to Cloud Storage.
      gsutil -m rsync -d -r -c frontend/dist "gs://$DOMAIN"

      # The command below tells browsers and proxies to always revalidate
      # certain files. We do this for HTML files because they aren't
      # fingerprinted, and stale versions may refer to fingerprinted assets
      # which no longer exist. For some reason, Parcel adds fingerprints
      # to the images referenced from the `site.webmanifest` file, but strangely
      # it doesn't add a fingerprint to the manifest file itself. As a result,
      # we must give them the same caching treatment as HTML files.
      gsutil -m setmeta \
        -h 'Cache-Control:public, max-age=0, must-revalidate' \
        "gs://$DOMAIN/**.html" \
        "gs://$DOMAIN/**.webmanifest"
