image: ubuntu:18.04
default: build
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -sL https://deb.nodesource.com/setup_14.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  npm_ci_backend:
    dependencies:
      - create_user
      - install_packages
    input_paths:
      - backend/package-lock.json
      - backend/package.json
    user: user
    command: |
      set -euo pipefail
      cd backend
      npm ci

  npm_ci_frontend:
    dependencies:
      - create_user
      - install_packages
    input_paths:
      - frontend/package-lock.json
      - frontend/package.json
    user: user
    command: |
      set -euo pipefail
      cd frontend
      npm ci

  build_backend:
    dependencies:
      - npm_ci_backend
    input_paths:
      - backend/.eslintignore
      - backend/.eslintrc.js
      - backend/.prettierignore
      - backend/prettier.config.json
      - backend/src
      - backend/tsconfig.json
    output_paths:
      - backend/dist
    user: user
    command: |
      set -euo pipefail
      cd backend
      npm run check
      npm run build

  build_frontend:
    dependencies:
      - npm_ci_frontend
    input_paths:
      - frontend/.eslintignore
      - frontend/.eslintrc.js
      - frontend/.prettierignore
      - frontend/prettier.config.json
      - frontend/src
      - frontend/static
      - frontend/tsconfig.json
    output_paths:
      - frontend/dist
    user: user
    command: |
      set -euo pipefail
      cd frontend
      npm run check
      npm run build

  build:
    dependencies:
      - build_backend
      - build_frontend

  deploy_backend:
    dependencies:
      - build_backend
      - create_user
      - install_packages
    cache: false
    input_paths:
      - backend/.gcloudignore
    environment:
      GCP_CREDENTIALS: none
    user: user
    command: |
      set -euo pipefail
      export GOOGLE_APPLICATION_CREDENTIALS=~/gcp-credentials.json
      echo "$GCP_CREDENTIALS" > "$GOOGLE_APPLICATION_CREDENTIALS"
      gcloud auth activate-service-account --key-file "$GOOGLE_APPLICATION_CREDENTIALS"

      # Deploy the Cloud Functions.
      cd backend
      gcloud functions deploy helloWorld \
        --project gigamesh-279607 \
        --region us-east1 \
        --runtime nodejs10 \
        --source . \
        --trigger-http \
        --allow-unauthenticated

  deploy_frontend:
    dependencies:
      - build_frontend
      - create_user
      - install_packages
    cache: false
    environment:
      GCP_CREDENTIALS: none
    user: user
    command: |
      set -euo pipefail
      export GOOGLE_APPLICATION_CREDENTIALS=~/gcp-credentials.json
      echo "$GCP_CREDENTIALS" > "$GOOGLE_APPLICATION_CREDENTIALS"
      gcloud auth activate-service-account --key-file "$GOOGLE_APPLICATION_CREDENTIALS"

      # Sync the files to Cloud Storage.
      gsutil -m rsync -d -r -c frontend/dist gs://www.gigamesh.io

      # The command below tells browsers and proxies to always revalidate
      # certain files. We do this for HTML files because they aren't
      # fingerprinted, and stale versions may refer to fingerprinted assets
      # which no longer exist. For some reason, Parcel adds fingerprints
      # to the images referenced from the `site.webmanifest` file, but strangely
      # it doesn't add a fingerprint to the manifest file itself. As a result,
      # we must give them the same caching treatment as HTML files.
      gsutil -m setmeta \
        -h 'Cache-Control:public, max-age=0, must-revalidate' \
        'gs://www.gigamesh.io/**.html' \
        'gs://www.gigamesh.io/**.webmanifest'

  deploy:
    dependencies:
      - deploy_backend
      - deploy_frontend
