image: ubuntu:18.04
default: check
tasks:
  install_packages:
    command: |
      set -euo pipefail
      apt-get update
      echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      apt-get install --yes apt-transport-https ca-certificates curl gnupg
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      curl -sL https://deb.nodesource.com/setup_14.x | bash -
      apt-get update
      apt-get install --yes google-cloud-sdk nodejs

  create_user:
    command: |
      set -euo pipefail
      adduser --disabled-password --gecos '' user

  install_dependencies:
    dependencies:
      - create_user
      - install_packages
    input_paths:
      - backend/package-lock.json
      - backend/package.json
      - frontend/package-lock.json
      - frontend/package.json
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm ci)
      (cd frontend && npm ci)

  build:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      - backend/dist
      - frontend/dist
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run build)
      (cd frontend && npm run build)

  check:
    dependencies:
      - build
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run check)
      (cd frontend && npm run check)

  format:
    dependencies:
      - install_dependencies
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    output_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/package-lock.json
      - backend/package.json
      - backend/src/
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and except symlinks
      # (cf. the note below about symlinks)
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/src/
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js

      # Shared top-level paths
      - shared
    user: user
    command: |
      set -euo pipefail
      (cd backend && npm run format)
      (cd frontend && npm run format)

      # These `rm` commands are needed to work around a bug in `docker container cp` related to
      # symlinks. See https://stackoverflow.com/questions/35787702/docker-cp-a-folder-with-a-relative-symlink-invalid-symlink
      # for details.
      rm backend/src/shared
      rm frontend/src/shared
      rm shared/.prettierrc.json
      rm shared/jest.config.js

  development:
    cache: false
    dependencies:
      - install_dependencies
    environment:
      SENDGRID_API_KEY: null
    input_paths:
      # All the top-level paths in `backend/` except those in `.gitignore` and those in
      # `mount_paths`
      - backend/.eslintrc.js
      - backend/.gcloudignore
      - backend/.gitignore
      - backend/.prettierrc.json
      - backend/jest.config.js
      - backend/package-lock.json
      - backend/package.json
      - backend/tsconfig.eslint.json
      - backend/tsconfig.json

      # All the top-level paths in `frontend/` except those in `.gitignore` and those in
      # `mount_paths`
      - frontend/.eslintrc.js
      - frontend/.gitignore
      - frontend/.prettierrc.json
      - frontend/babel.config.json
      - frontend/images.d.ts
      - frontend/jest.config.js
      - frontend/package-lock.json
      - frontend/package.json
      - frontend/postcss.config.js
      - frontend/static/
      - frontend/tsconfig.eslint.json
      - frontend/tsconfig.json
      - frontend/webpack.common.js
      - frontend/webpack.development.js
      - frontend/webpack.production.js
    mount_paths:
      - backend/src/
      - frontend/src/
      - shared
    ports:
      - 8081:8081 # The backend
      - 8080:8080 # The frontend
    user: user
    command: |
      set -euo pipefail
      (cd frontend && npm run development) & (cd backend && npm run development)

  deploy_backend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    input_paths:
      - backend/.gcloudignore
    environment:
      GCF_REGION: us-central1
      GCF_SERVICE_ACCOUNT: production@gigamesh-279607.iam.gserviceaccount.com
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-279607
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Deploy the Cloud Functions.
      gcloud functions deploy api \
        --project "$GCP_PROJECT" \
        --region "$GCF_REGION" \
        --runtime nodejs10 \
        --source backend \
        --entry-point entry \
        --service-account "$GCF_SERVICE_ACCOUNT" \
        --trigger-http \
        --allow-unauthenticated

  deploy_frontend:
    dependencies:
      - build
      - check
      - create_user
      - install_packages
    cache: false
    environment:
      DOMAIN: www.gigamesh.io
      GCP_DEPLOY_CREDENTIALS: null
      GCP_PROJECT: gigamesh-279607
    user: user
    command: |
      set -euo pipefail

      # Authenticate with the Google Cloud SDK.
      GOOGLE_KEY_FILE=~/gcp-credentials.json
      echo "$GCP_DEPLOY_CREDENTIALS" > "$GOOGLE_KEY_FILE"
      gcloud auth activate-service-account --key-file "$GOOGLE_KEY_FILE"

      # Sync the frontend files to Cloud Storage.
      gsutil -m rsync -d -r -c frontend/dist "gs://$DOMAIN"

      # The command below tells browsers and proxies to always revalidate
      # certain files. We do this for HTML files because they aren't
      # fingerprinted, and stale versions may refer to fingerprinted assets
      # which no longer exist.
      gsutil -m setmeta \
        -h 'Cache-Control:public, max-age=0, must-revalidate' \
        'gs://'"$DOMAIN"'/**.html'

  deploy:
    dependencies:
      - deploy_backend
      - deploy_frontend
    cache: false
